# -*- coding: utf-8 -*-
"""learning_API_call.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18P4RpntW5HqTyGxLrUJimOTL6o5qe_tZ
"""

import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import matplotlib.pyplot as plt

# --- SETUP ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = 'credentials.json'

# Authenticate with Google Sheets
credentials = Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    scopes=SCOPES
)
gc = gspread.authorize(credentials)

# --- STREAMLIT APP ---
st.set_page_config(page_title="Production Averaging", layout="centered")

st.title("üìä Daily Production Averaging App")
st.markdown("This app reads production data from 3 sheets, calculates daily averages, and writes them to a 4th sheet.")

# Input: Google Sheet URLs
st.sidebar.header("üîó Google Sheet Links")
sheet1_url = st.sidebar.text_input("Sheet 1 (Plant A) URL")
sheet2_url = st.sidebar.text_input("Sheet 2 (Plant B) URL")
sheet3_url = st.sidebar.text_input("Sheet 3 (Plant C) URL")
summary_sheet_url = st.sidebar.text_input("Results Sheet (Summary) URL")

# Function to convert full sheet URL to Sheet ID and GID
def extract_sheet_id(url):
    try:
        return url.split("/d/")[1].split("/")[0]
    except IndexError:
        return None

# Function to load data from a specific sheet
def load_sheet(sheet_url):
    sheet_id = extract_sheet_id(sheet_url)
    if sheet_id:
        sheet = gc.open_by_key(sheet_id)
        return sheet
    return None

# Expected columns in each plant sheet
REQUIRED_COLUMNS = ["Date", "Line A", "Line B", "Line C"]

def validate_and_read(ws):
    df = pd.DataFrame(ws.get_all_records())
    if all(col in df.columns for col in REQUIRED_COLUMNS):
        df["Date"] = pd.to_datetime(df["Date"])
        df["Average"] = df[["Line A", "Line B", "Line C"]].mean(axis=1)
        return df
    else:
        st.error(f"Sheet '{ws.title}' is missing required columns.")
        return None

# Main logic (only runs if all URLs are provided)
if sheet1_url and sheet2_url and sheet3_url and summary_sheet_url:
    try:
        # Load sheets
        sheet1 = load_sheet(sheet1_url)
        sheet2 = load_sheet(sheet2_url)
        sheet3 = load_sheet(sheet3_url)
        summary_sheet = load_sheet(summary_sheet_url)

        if not all([sheet1, sheet2, sheet3, summary_sheet]):
            st.error("‚ùå One or more sheet URLs are invalid.")
        else:
            # Read the first worksheet from each sheet
            df1 = validate_and_read(sheet1.get_worksheet(0))
            df2 = validate_and_read(sheet2.get_worksheet(0))
            df3 = validate_and_read(sheet3.get_worksheet(0))

            if None in (df1, df2, df3):
                st.stop()

            # Combine all into one DataFrame
            summary_df = pd.DataFrame({
                "Date": df1["Date"],
                "Plant A Avg": df1["Average"].round(2),
                "Plant B Avg": df2["Average"].round(2),
                "Plant C Avg": df3["Average"].round(2)
            })

            summary_df["Overall Avg"] = summary_df[["Plant A Avg", "Plant B Avg", "Plant C Avg"]].mean(axis=1).round(2)

            # Write to the first worksheet of the summary sheet
            summary_ws = summary_sheet.get_worksheet(0)
            summary_ws.clear()
            summary_ws.update([summary_df.columns.values.tolist()] + summary_df.values.tolist())

            st.success("‚úÖ Daily averages calculated and written to summary sheet.")
            st.dataframe(summary_df)

            # --- Optional: Plotting ---
            st.subheader("üìà Production Trend")
            fig, ax = plt.subplots()
            for col in ["Plant A Avg", "Plant B Avg", "Plant C Avg", "Overall Avg"]:
                ax.plot(summary_df["Date"], summary_df[col], marker='o', label=col)
                for i, val in enumerate(summary_df[col]):
                    ax.text(summary_df["Date"].iloc[i], val, f'{val}%', fontsize=8)

            ax.set_xlabel("Date")
            ax.set_ylabel("Average Production")
            ax.legend()
            st.pyplot(fig)

    except Exception as e:
        st.error(f"üö® Error occurred: {str(e)}")

else:
    st.warning("‚ö†Ô∏è Please fill in all 4 Google Sheet URLs in the sidebar.")