# -*- coding: utf-8 -*-
"""learning_API_call.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18P4RpntW5HqTyGxLrUJimOTL6o5qe_tZ
"""

import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import matplotlib.pyplot as plt

# ---- CONFIG ----
SERVICE_ACCOUNT_FILE = 'credentials.json'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# üîó HARDCODED Google Sheet URLs
SHEET_A_URL = "https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=0#gid=0"
SHEET_B_URL = "https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=801337031#gid=801337031"
SHEET_C_URL = "https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=1333453642#gid=1333453642"
SUMMARY_URL = "https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=9246028#gid=9246028"

# ---- AUTHENTICATE ----
credentials = Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    scopes=SCOPES
)
gc = gspread.authorize(credentials)

# ---- HELPERS ----
REQUIRED_COLUMNS = ["Date", "Line A", "Line B", "Line C"]

def extract_sheet_id(url):
    return url.split("/d/")[1].split("/")[0]

def load_and_process_sheet(sheet_url):
    sheet_id = extract_sheet_id(sheet_url)
    worksheet = gc.open_by_key(sheet_id).get_worksheet(0)
    df = pd.DataFrame(worksheet.get_all_records())

    if not all(col in df.columns for col in REQUIRED_COLUMNS):
        raise ValueError(f"Missing required columns in sheet: {sheet_url}")

    df["Date"] = pd.to_datetime(df["Date"])
    df["Average"] = df[["Line A", "Line B", "Line C"]].mean(axis=1)
    return df[["Date", "Average"]]

def write_summary(df, sheet_url):
    sheet_id = extract_sheet_id(sheet_url)
    worksheet = gc.open_by_key(sheet_id).get_worksheet(0)
    worksheet.clear()
    worksheet.update([df.columns.tolist()] + df.values.tolist())

# ---- STREAMLIT UI ----
st.set_page_config(page_title="Production Summary", layout="centered")
st.title("üìä Daily Production Summary (Auto)")

try:
    # Load and process all plant data
    df_a = load_and_process_sheet(SHEET_A_URL)
    df_b = load_and_process_sheet(SHEET_B_URL)
    df_c = load_and_process_sheet(SHEET_C_URL)

    # Merge on Date
    summary_df = pd.DataFrame({
        "Date": df_a["Date"],
        "Plant A Avg": df_a["Average"].round(2),
        "Plant B Avg": df_b["Average"].round(2),
        "Plant C Avg": df_c["Average"].round(2)
    })
    summary_df["Overall Avg"] = summary_df[["Plant A Avg", "Plant B Avg", "Plant C Avg"]].mean(axis=1).round(2)

    # Write to summary sheet
    write_summary(summary_df, SUMMARY_URL)

    # Show results
    st.success("‚úÖ Daily averages calculated and written to summary sheet.")
    st.dataframe(summary_df)

    # Plot
    st.subheader("üìà Production Trend")
    fig, ax = plt.subplots()
    for col in ["Plant A Avg", "Plant B Avg", "Plant C Avg", "Overall Avg"]:
        ax.plot(summary_df["Date"], summary_df[col], marker='o', label=col)
        for i, val in enumerate(summary_df[col]):
            ax.text(summary_df["Date"].iloc[i], val, f'{val}%', fontsize=8)

    ax.set_xlabel("Date")
    ax.set_ylabel("Average Production")
    ax.legend()
    st.pyplot(fig)

except Exception as e:
    st.error(f"‚ùå Error: {str(e)}")