# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18P4RpntW5HqTyGxLrUJimOTL6o5qe_tZ
"""

import streamlit as st
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials

# --- Streamlit App Title ---
st.title("üìä Daily Production Averaging App")

# --- Sidebar Inputs ---
st.sidebar.header("üîó Google Sheet Links")

A_link = st.sidebar.text_input("https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=0#gid=0", "")
B_link = st.sidebar.text_input("https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=801337031#gid=801337031", "")
C_link = st.sidebar.text_input("https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=1333453642#gid=1333453642", "")
D_link = st.sidebar.text_input("https://docs.google.com/spreadsheets/d/1r6BvQzRE_vYMegpxhOl-0AU0cix4wOLVDc_035eOUsA/edit?gid=9246028#gid=9246028", "")

uploaded_file = st.sidebar.file_uploader("üîê Upload credentials.json", type="json")

# --- Function Definitions ---
@st.cache_data(show_spinner=False)
def authenticate(credentials_file):
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
    client = gspread.authorize(creds)
    return client

def read_sheet(client, link):
    sheet_id = link.split('/')[5]
    sheet = client.open_by_key(sheet_id).sheet1
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def calculate_daily_avg(df):
    df['Average'] = df[['Line A', 'Line B', 'Line C']].mean(axis=1)
    return df[['Date', 'Average']]

def write_to_sheet(client, df, link):
    sheet_id = link.split('/')[5]
    sheet = client.open_by_key(sheet_id).sheet1
    sheet.clear()
    sheet.insert_rows([df.columns.tolist()] + df.values.tolist())

# --- Main App Logic ---
if uploaded_file and A_link and B_link and C_link and D_link:
    st.success("‚úÖ All inputs provided. Ready to run.")

    if st.button("üöÄ Run Calculation and Upload"):
        try:
            with st.spinner("Authenticating and reading data..."):
                # Save uploaded credentials to a temp file
                with open("temp_credentials.json", "wb") as f:
                    f.write(uploaded_file.read())

                client = authenticate("temp_credentials.json")

                df_a = calculate_daily_avg(read_sheet(client, A_link))
                df_b = calculate_daily_avg(read_sheet(client, B_link))
                df_c = calculate_daily_avg(read_sheet(client, C_link))

            with st.spinner("Processing data..."):
                merged = df_a.merge(df_b, on='Date', suffixes=('_A', '_B'))
                merged = merged.merge(df_c, on='Date')
                merged.rename(columns={'Average': 'Plant_C'}, inplace=True)
                merged.rename(columns={'Average_A': 'Plant_A', 'Average_B': 'Plant_B'}, inplace=True)
                merged['Overall Avg'] = merged[['Plant_A', 'Plant_B', 'Plant_C']].mean(axis=1)

            with st.spinner("Writing to output sheet..."):
                write_to_sheet(client, merged, D_link)

            st.success("‚úÖ Daily averages written to output sheet!")
            st.dataframe(merged)

        except Exception as e:
            st.error(f"‚ùå Error: {str(e)}")
else:
    st.warning("‚ö†Ô∏è Please fill all inputs in the sidebar and upload credentials.json.")